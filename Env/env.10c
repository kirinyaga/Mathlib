; --------------------------------------------
; Title:   env
; Author:  kirinyaga
; Date:    21/05/2012
; Version: 
; --------------------------------------------


; Power-On Self-Test
#segment boot
POST:		iaq 1
			hwn i
			set push, .nextdevice; adress to jump back
			set pc, peek
.loop:		; check devices
			hwq i
			; LEM1802 monitor
			ife b, 0x7349
				ife a, 0xf615
					ife c, 0x1802
						SET PC, init_LEM1802
			; Generic Clock
			ife b, 0x12d0
				ife a, 0xb402
					ife c, 1
						set pc, init_timer
			; DevKit Vector Display
			ife b, 0x3c70
				ife a, 0x4111
					ife c, 1
						set pc, init_vecdsp					
			; Generic Keyboard
			ife b, 0x30cf
				ife a, 0x7406
					ife c, 1
						set pc, init_kbd					
			; device unknown
			set i, i			; ignore it
.nextdevice:sub i, 1
			ifa i, -1
				set pc, loop
			set i, pop			; clean stack
			ias handler
			iaq 0
			set pc, Main


; general interrupt handler
#segment code
handler:	set pc, a





; Generic Timer
#define DEV_TMR_SETTICK		0	; 60/B per sec, 0 to disable
#define DEV_TMR_GETTICK		1	; in C
#define DEV_TMR_ENABLEINT	2	; with msg B, 0 to disable

#segment boot
init_timer: set a, DEV_TMR_ENABLEINT
			set b, timerHandler
			hwi i
			set a, DEV_TMR_SETTICK
			set b, 2
			hwi i
			set pc, peek
timerHandler:
			set push, ex
			add [timercount], 1
			jsr drawing
			set ex, pop
			rfi 0
#segment data
timercount:	dat 0





; Generic Keyboard
#define DEV_KBD_CLEARBUFFER	0	; 60/B per sec, 0 to disable
#define DEV_KBD_GETKEY		1	; in C
#define DEV_KBD_KEYPRESSED	2	; C = (key B pressed)
#define DEV_KBD_ENABLEINT	3	; with msg B, 0 to disable

#segment boot
init_kbd:	set a, DEV_KBD_ENABLEINT
			set b, kbdHandler
			hwi i
			set [kbd_id], i
			set pc, peek
kbdHandler:
			set push, c
			set a, DEV_KBD_GETKEY
			hwi [kbd_id]
			ifn c, 0
				set[keypressed], 1
			set c, pop
			rfi 0
#segment data
kbd_id:		dat 0
keypressed:	dat 0





; main code entry
#segment code
Main:
dsp_orbit:	; calc orbital parameters
			jsr setrndparams
			set a, ellelt
			jsr orbellelts
			set a, ellelt
			set b, apsis
			jsr orbapsis
			set a, euler
			jsr orbelts
			; display data
			jsr dspparams
			; draw planet at center
			set a, [planet]
			set b, [vecdsp_wrk]
			jsr drwsphere
			; draw orbit
			set c, a
			set [c-1], DKVD_OFF
			set push, c
			set push, DKVD_ON
			set [polar+1], 0
.loop:		; calc coords from polar pos on orbit
			set a, c
			jsr setorbpos
			; update action
			set [c+3], peek
			add c, 4
			set peek, DKVD_MOVE
			; increment true anomaly
			set a, polar+1
			set push, [a]
			add [a], PI/32
.pool:		ifg [a], pop
				set pc, .loop
			; close the ellipsis
			set b, pop
			set b, pop
			set [c], [b]
			set [c+1], [b+1]
			set [c+2], [b+2]
			set [c+3], DKVD_END
			add c, 4
			; swap segs buffer
			_DKVD_swapbuffers
			; copy now current one to working area
			set a, [vecdsp_buf]
			set b, [vecdsp_wrk]
			sub c, a
			set push, c
			jsr memcpy
			set a, pop
			; init sat pos
			set [polar+1], 0
			; update sat pos
.satloop:	set a, [vecdsp_wrk]
			add a, c
			set b, a
			jsr setorbpos
			set [b-1], DKVD_OFF
			set [b+3], DKVD_ON
			set [b+4], [b]
			set [b+5], [b+1]
			set [b+6], [b+2]
			set [b+7], DKVD_FLARE
			; swap segs buffer
			_DKVD_swapbuffers
			set [vecdsp_flg], 0
			; display data
			jsr dsporbit
			; wait for frame to be displayed
			ife [vecdsp_flg], 0
				sub pc, 3
			; calc sat speed
			set a, [polar]
			set b, apsis
			jsr orbangspd
			set [polar+2], a
			add [polar+1], a
			; check for key pressed
			ife [keypressed], 0
.satpool:		set pc, .satloop
			; calc a new orbit
			set [keypressed], 0
			set pc, dsp_orbit

#segment data
; variables
var: 	dat 0x0400
; parameters
planet:
	dat 0x1000		; radius
	dat 0			; mu=GM (mass)
euler:
	dat 0xF000		; Omega:pi/3
	dat 0x0000		; i:pi/6
	dat 0x3000		; omega:pi/8
	dat 0			; sin(i)
	dat 0			; cos(i)
ellelt:
	dat 0x3000		; e:excentricity
	dat 0x4000		; a:semimajor axis
	dat 0			; l:semilactus rectum
	dat 0			; b:semiminor axis
apsis:
	dat 0			; ap:apoapsis
	dat 0			; pe:periapsis
	dat 0			; dA[L]: dArea/16 (1/32th of turn)
	dat 0			; dA[H]: to display the ellipse
	dat 32			; period
; coordinates
polar:
	dat 0			; r:radius
	dat 0			; theta:angle
	dat 0			; dtheta:angular speed
spherical:
	dat 0			; r:radius
	dat 0			; theta:azimuth
	dat 0			; phi:elevation


#segment code
; calc vecdsp coords from orbit polar coords
; in A: address of coords
; out [A]
setorbpos:	set push, a
			; orbital polar coord from true anomaly
			set a, ellelt
			set b, polar
			jsr orbpolar
			; to spherical coord in planet referential
			set a, polar
			set b, spherical
			set push, euler
			jsr pe2s16pc
			add sp, 1
			; to cartesian coord in vector disp ref
			set a, spherical
			set b, pop
			jsr s2c16
			; done
			set pc, pop


#segment code
setrndparams:
			add [rand_lfsr_seed],[timercount]
			jsr rand_lfsr
			set [euler], a
			jsr rand_lfsr
			set [euler+1], a
			jsr rand_lfsr
			set [euler+2], a
			
			jsr rand_lfsr
			shr a, 4
			add a, 300
			set [planet], a
			
			set b, a
			add b, 500
			ifl b, 5000
				set b, 5000
			jsr rand_lfsr
			shr a, 2
			ifl a, b
				set a, b
			set [ellelt+1], a

			set b, [planet]
			add b, 100
			_dvii16(b,a)
			xor b,-1
			add b, (ONE+1)
			jsr rand_lfsr
			shr a, 2
			ifg a, b
				set a, b
			set [ellelt], a
			set pc, pop


#segment code
dspparams:
			LEM_SETCURSOR(1,11)
			set a, [euler]
			jsr print_angle
			LEM_SETCURSOR(1,27)
			set a, [euler+1]
			jsr print_angle
			LEM_SETCURSOR(2,11)
			set a, [euler+2]
			jsr print_angle
			LEM_SETCURSOR(2,27)
			set a, [euler+3]
			jsr print_hexa
			LEM_SETCURSOR(4,11)
			set a, [ellelt+1]
			jsr print_hexa
			LEM_SETCURSOR(4,27)
			set a, [ellelt]
			jsr print_hexa
			LEM_SETCURSOR(5,11)
			set a, [ellelt+3]
			jsr print_hexa
			LEM_SETCURSOR(5,27)
			set a, [ellelt+2]
			jsr print_hexa
			LEM_SETCURSOR(6,11)
			set a, [apsis]
			jsr print_hexa
			LEM_SETCURSOR(6,27)
			set a, [apsis+1]
			jsr print_hexa
			LEM_SETCURSOR(7,11)
			set a, [apsis+4]
			jsr print_hexa
			LEM_SETCURSOR(7,27)
			set a, [apsis+3]
			jsr print_hexa
			set pc, pop
			

#segment code
dsporbit:			
			LEM_SETCURSOR(9,11)
			set a, [polar+1]
			jsr print_angle
			LEM_SETCURSOR(9,27)
			set a, [polar]
			jsr print_hexa
			LEM_SETCURSOR(10,11)
			set a, [polar+2]
			jsr print_angle
			LEM_SETCURSOR(11,11)
			set a, [spherical+1]
			jsr print_angle
			LEM_SETCURSOR(11,27)
			set a, [spherical+2]
			jsr print_angle
			set pc, pop
